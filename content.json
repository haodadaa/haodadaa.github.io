{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"Haodada","url":"http://haodadaa.github.io"},"pages":[{"title":"关于","date":"2016-09-10T18:47:30.000Z","updated":"2017-05-19T19:17:58.171Z","comments":true,"path":"about/index.html","permalink":"http://haodadaa.github.io/about/index.html","excerpt":"","text":"本站点是基于hexo开发的静态网站，纯属个人兴趣、技术分享，转载网站内容请注明出处。作者从事Android开发，同时也是一个Geek兴趣爱好者，欢迎大家浏览本站点，希望能多和大神们交流。"},{"title":"分类","date":"2017-05-19T19:12:09.444Z","updated":"2017-05-19T19:12:09.444Z","comments":true,"path":"categories/index.html","permalink":"http://haodadaa.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2017-05-19T19:12:01.281Z","updated":"2017-05-19T19:12:01.281Z","comments":false,"path":"tags/index.html","permalink":"http://haodadaa.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"PC-硬件评测软件","slug":"PC-硬件评测软件","date":"2017-06-19T08:18:57.000Z","updated":"2017-06-19T08:29:39.516Z","comments":true,"path":"2017/06/19/PC-硬件评测软件/","link":"","permalink":"http://haodadaa.github.io/2017/06/19/PC-硬件评测软件/","excerpt":"分类 CPU&amp;GPU CPU-Z &amp; GPU-Z CINEBENCH(准确度高) Fritz Chess Benchmark(CPU,可调节线程) Unigine Heaven(GPU) 3DMark","text":"分类 CPU&amp;GPU CPU-Z &amp; GPU-Z CINEBENCH(准确度高) Fritz Chess Benchmark(CPU,可调节线程) Unigine Heaven(GPU) 3DMark 硬盘 CrystalDiskMark AS SSD 稳定性 Furmark ORTHOS","categories":[{"name":"PC-Windows","slug":"PC-Windows","permalink":"http://haodadaa.github.io/categories/PC-Windows/"}],"tags":[],"keywords":[{"name":"PC-Windows","slug":"PC-Windows","permalink":"http://haodadaa.github.io/categories/PC-Windows/"}]},{"title":"PC-日常应用软件","slug":"PC-休闲娱乐软件","date":"2017-06-19T02:52:27.000Z","updated":"2017-06-19T08:20:03.913Z","comments":true,"path":"2017/06/19/PC-休闲娱乐软件/","link":"","permalink":"http://haodadaa.github.io/2017/06/19/PC-休闲娱乐软件/","excerpt":"分类 音乐 网易云音乐 AIMP Foobar2000","text":"分类 音乐 网易云音乐 AIMP Foobar2000 抓轨 Exact Audio Copy 画图 SAI 修图 Adobe Illustrator Inkscape 网盘 百度网盘 虚拟机 VirtualBox 硬件检测 EverestUltimatePortable 硬盘检测 DiskGenius 屏幕亮度调节 Flux","categories":[{"name":"PC-Windows","slug":"PC-Windows","permalink":"http://haodadaa.github.io/categories/PC-Windows/"}],"tags":[],"keywords":[{"name":"PC-Windows","slug":"PC-Windows","permalink":"http://haodadaa.github.io/categories/PC-Windows/"}]},{"title":"PC-编程常用软件","slug":"PC-编程常用软件","date":"2017-06-19T02:51:12.000Z","updated":"2017-06-19T16:27:25.393Z","comments":true,"path":"2017/06/19/PC-编程常用软件/","link":"","permalink":"http://haodadaa.github.io/2017/06/19/PC-编程常用软件/","excerpt":"分类 思维导图 XMind 幕布（文档编辑） 流程图 Microsoft Visio Markdown编辑 MarkdownPad2","text":"分类 思维导图 XMind 幕布（文档编辑） 流程图 Microsoft Visio Markdown编辑 MarkdownPad2 Android开发 Android Studio adb 1.0.32 AS插件 Android ButterKnife Zelezny Android Parcelable code generator Code Iris ECTranslation FindBugs-IDEA GsonFormat Sexy Editor 模拟器 Genymotion 接口调试（Chrome插件） Postman Advanced REST client 分布式管理 Git Github TortoiseSVN 工具包 JDK 1.7 JDK 1.8 翻墙 OpenVPN Shadowsocks 代码编辑 Sublime Text 3 SublimeText3插件 Package Control Localization Material Theme SublimeTextTrans 反汇编工具 IDA Pro 6.8 SQLite可视化管理 SQLite Expert 博客建站 npm 3.10.3 nodejs 6.3.1 hexo 3.2.2 npm插件 hexo-generator-cname 电脑录屏 Bandicam Gif录制 GifCam 专业截屏 Snagit 图片标注 PxCook 个人收藏(chrome插件) Pocket 画类图 StarUML","categories":[{"name":"PC-Windows","slug":"PC-Windows","permalink":"http://haodadaa.github.io/categories/PC-Windows/"}],"tags":[],"keywords":[{"name":"PC-Windows","slug":"PC-Windows","permalink":"http://haodadaa.github.io/categories/PC-Windows/"}]},{"title":"Android反编译","slug":"Android反编译","date":"2017-06-02T02:17:05.000Z","updated":"2017-06-16T03:38:34.262Z","comments":true,"path":"2017/06/02/Android反编译/","link":"","permalink":"http://haodadaa.github.io/2017/06/02/Android反编译/","excerpt":"前言每当我们在一个App上看到一个很不错的实现或效果时，我们可能会想具体的实现是如何做到的。这时我们拥有这个App的apk包，其中包含了项目的源码和资源文件，我们可以反编译去学习和借鉴成熟的App的做法，来丰富我们的知识。（ps：反编译本质是破解，获取源代码，我们只提倡通过反编译来学习借鉴别人好的方法和实现，而不是修改源码来获取暴利。为了维护app的安全、保护知识产权，工程师们通过混淆、加固（加壳）等方式来加强阅读难度、加大破解难度。）","text":"前言每当我们在一个App上看到一个很不错的实现或效果时，我们可能会想具体的实现是如何做到的。这时我们拥有这个App的apk包，其中包含了项目的源码和资源文件，我们可以反编译去学习和借鉴成熟的App的做法，来丰富我们的知识。（ps：反编译本质是破解，获取源代码，我们只提倡通过反编译来学习借鉴别人好的方法和实现，而不是修改源码来获取暴利。为了维护app的安全、保护知识产权，工程师们通过混淆、加固（加壳）等方式来加强阅读难度、加大破解难度。） 工具 apktool 2.2.2（反编译apk，获取smali源码和资源文件） dex2jar 2.0（将dex文件转化为jar包） jd-gui（查看jar包内容） jadx 0.6.1（查看jar包内容） ApkTool smali语法是Android虚拟机识别执行的指令代码，和dex文件可以相互转化 可以得到所有的资源文件，包括xml、图片资源和默认资源，在分析时，大概知道哪些属于默认资源，区分开来才不会混淆。 注意：一些大公司会利用apktool的漏洞来防止反编译成功，所以尽量保持工具的更新，对能力强的可以在github下载源码自己动手修复这些问题。 dex2jar 把apk包改成rar或zip解压，可以得到mainfest、res资源文件和classes.dex，但是这些资源文件是遵循arsc格式的字节码，而我们通过dex2jar工具就可以把classes.dex转化为classes.jar。 注意：对于没有混淆和加固的dex，我们才能直接获取到可阅读的源码，混淆过的源码，打开后包名和类名都会变成abc这些没有任何意义的字母；加固后的源码我们只会获得几个类（例如360加固，包名会变成com.qihoo.util）。 jd-gui &amp; jadx 转化后的jar包可以用jd-gui打开，查看具体的源码内容和导出源码，但是导出的源码的resId是真实数字，并不能还原到真正的源码，所以适合学习流程和实现，如果还原源码那修改这些Id会让你很烦躁。 jadx相比jd-gui，其resId则是更接近源码，只有少数resId是真实数字，修改幅度较小。同时这个工具可以实现反编译，可视化和分析apk结构，相比apktool，它的反编译较耗时，不能修改代码和回编译。 具体步骤 在apktool文件夹下，shift+右键打开命令行界面，假设我们反编译的apk为abc.apk，将apk放到文件夹下，输入命令行：123apktool.bat d -f abc.apk -o abc\\\\apktool.bat d -f [apk包] -o [输出文件夹]\\\\在低版本的apktool为apktool.bat d -f [apk包] [输出文件夹]，建议使用高版本 即可以看到在apktool文件夹下生成abc文件夹，反编译的资源文件就在这个文件夹下。 同样定位到dex2jar文件夹下，打开命令行界面，通过apk转格式解压获得classes.dex放到该文件夹下，在命令行界面输入：1d2j-dex2jar.bat classess.dex 执行完成后，在文件夹下多出一个同名jar包，可以使用jd-gui、jadx查看源码，并导出源码。","categories":[{"name":"Android","slug":"Android","permalink":"http://haodadaa.github.io/categories/Android/"}],"tags":[{"name":"反编译","slug":"反编译","permalink":"http://haodadaa.github.io/tags/反编译/"}],"keywords":[{"name":"Android","slug":"Android","permalink":"http://haodadaa.github.io/categories/Android/"}]},{"title":"Android 6.0运行时权限","slug":"Android-6.0运行时权限","date":"2017-05-19T07:44:18.000Z","updated":"2017-05-22T13:41:28.611Z","comments":true,"path":"2017/05/19/Android-6.0运行时权限/","link":"","permalink":"http://haodadaa.github.io/2017/05/19/Android-6.0运行时权限/","excerpt":"前言Android6.0的发布也证明了Google开始在安全和权限的控制，以及给用户更人性化的方式去使用Android系统。6.0带来了一个主要的新特性：运行时权限。在以前的版本，我们只需要在mainfest文件中声明所需要的权限，及可获得整个应用程序使用过程中的权限，这些权限在我们安装应用程序时会列出。而运行时权限则是当我们需要使用某个敏感权限时，弹出一个对话框，让用户去选择是否同意授权，这样一定程度上保护了用户的隐私安全，这个处理权完全在用户手上。","text":"前言Android6.0的发布也证明了Google开始在安全和权限的控制，以及给用户更人性化的方式去使用Android系统。6.0带来了一个主要的新特性：运行时权限。在以前的版本，我们只需要在mainfest文件中声明所需要的权限，及可获得整个应用程序使用过程中的权限，这些权限在我们安装应用程序时会列出。而运行时权限则是当我们需要使用某个敏感权限时，弹出一个对话框，让用户去选择是否同意授权，这样一定程度上保护了用户的隐私安全，这个处理权完全在用户手上。 分类并非所有的权限都是需要用户同意的，不然用户需要授权的权限太多也影响了用户体验，而且并非所有的权限都是敏感权限。因此Android6.0对权限进行了分类，分类如下： Normal Permissions 正常权限不涉及用户隐私，不会带来用户安全问题；安装时就授权，不会在提示用户授权。这类权限应用程序需要时，只需在mainfest文件中声明。主要包括：1234567891011121314151617181920212223242526272829303132333435363738android.permission.ACCESS_LOCATION_EXTRA_COMMANDSandroid.permission.ACCESS_NETWORK_STATEandroid.permission.ACCESS_NOTIFICATION_POLICYandroid.permission.ACCESS_WIFI_STATEandroid.permission.ACCESS_WIMAX_STATEandroid.permission.BLUETOOTHandroid.permission.BLUETOOTH_ADMINandroid.permission.BROADCAST_STICKYandroid.permission.CHANGE_NETWORK_STATEandroid.permission.CHANGE_WIFI_MULTICAST_STATEandroid.permission.CHANGE_WIFI_STATEandroid.permission.CHANGE_WIMAX_STATEandroid.permission.DISABLE_KEYGUARDandroid.permission.EXPAND_STATUS_BARandroid.permission.FLASHLIGHTandroid.permission.GET_ACCOUNTSandroid.permission.GET_PACKAGE_SIZEandroid.permission.INTERNETandroid.permission.KILL_BACKGROUND_PROCESSESandroid.permission.MODIFY_AUDIO_SETTINGSandroid.permission.NFCandroid.permission.READ_SYNC_SETTINGSandroid.permission.READ_SYNC_STATSandroid.permission.RECEIVE_BOOT_COMPLETEDandroid.permission.REORDER_TASKSandroid.permission.REQUEST_INSTALL_PACKAGESandroid.permission.SET_TIME_ZONEandroid.permission.SET_WALLPAPERandroid.permission.SET_WALLPAPER_HINTSandroid.permission.SUBSCRIBED_FEEDS_READandroid.permission.TRANSMIT_IRandroid.permission.USE_FINGERPRINTandroid.permission.VIBRATEandroid.permission.WAKE_LOCKandroid.permission.WRITE_SYNC_SETTINGScom.android.alarm.permission.SET_ALARMcom.android.launcher.permission.INSTALL_SHORTCUTcom.android.launcher.permission.UNINSTALL_SHORTCUT Particular Permissions特殊权限特殊权限有两个：SYSTEM_ALERT_WINDOW，设置悬浮窗，进行一些黑科技WRITE_SETTINGS 修改系统设置这两个特殊权限需要通过Intent隐式启动的方式来授权，通过startActivityForResult来完成授权和获取授权结果。 Dangerous Permissions 危险权限危险权限即我们本文主要要说明的运行时权限，以下权限需要在运行时判断： 身体传感器BodySensor 日历Calendar 摄像头Camera 通讯录Contacts 地理位置Location 麦克风MicroPhone 电话Phone 短信SMS 存储空间Storage 权限分组和其具体权限，如下：12345678910111213141516171819202122232425262728293031323334353637383940414243//身体传感器group:android.permission-group.SENSORS permission:android.permission.BODY_SENSORS//日历group:android.permission-group.CALENDAR permission:android.permission.READ_CALENDAR permission:android.permission.WRITE_CALENDAR//摄像头group:android.permission-group.CAMERA permission:android.permission.CAMERA//通讯录group:android.permission-group.CONTACTS permission:android.permission.WRITE_CONTACTS permission:android.permission.GET_ACCOUNTS permission:android.permission.READ_CONTACTS//地理位置group:android.permission-group.LOCATION permission:android.permission.ACCESS_FINE_LOCATION permission:android.permission.ACCESS_COARSE_LOCATION//麦克风group:android.permission-group.MICROPHONE permission:android.permission.RECORD_AUDIO//电话group:android.permission-group.PHONE permission:android.permission.READ_CALL_LOG permission:android.permission.READ_PHONE_STATE permission:android.permission.CALL_PHONE permission:android.permission.WRITE_CALL_LOG permission:android.permission.USE_SIP permission:android.permission.PROCESS_OUTGOING_CALLS permission:com.android.voicemail.permission.ADD_VOICEMAIL//短信group:android.permission-group.SMS permission:android.permission.READ_SMS permission:android.permission.RECEIVE_WAP_PUSH permission:android.permission.RECEIVE_MMS permission:android.permission.RECEIVE_SMS permission:android.permission.SEND_SMS permission:android.permission.READ_CELL_BROADCASTS//存储空间group:android.permission-group.STORAGE permission:android.permission.READ_EXTERNAL_STORAGE permission:android.permission.WRITE_EXTERNAL_STORAGE 实践Android 6.0提供了如下API为我们完成授予运行时权限：123int checkSelfPermission(String permission)void requestPermissions(String[] permissions, int requestCode)void onRequestPermissionsResult(int requestCode,String permissions[], int[] grantResults) 上述的前两个方法需要API 23或以上才能支持，所以我们也可以使用Support Library v4中提供的方法12int ContextCompat.checkSelfPermission(Context context,String permission)void ActivityCompat.requestPermissions(Activity activity,String[] permissions,int requestCode) 通过上述方法，我们就可以完成一个简单的运行时权限的处理。当用户触发要授权的操作时，先检查权限是否以授予，再请求权限，在权限授予结果回调中做我们自己的处理，代码如下：MainActivity.java ：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647public class MainActivity extends AppCompatActivity &#123; private static final int PERMISSIONS_REQUEST_AUDIO = 1; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); &#125; public void onClick(View v)&#123; if (ContextCompat.checkSelfPermission(this, Manifest.permission.RECORD_AUDIO) != PackageManager.PERMISSION_GRANTED) &#123; requsetPermission(); &#125; else &#123; &#125; &#125; private void requsetPermission()&#123; ActivityCompat.requestPermissions(this, new String[]&#123;Manifest.permission.MODIFY_AUDIO_SETTINGS, Manifest.permission.RECORD_AUDIO&#125;, PERMISSIONS_REQUEST_AUDIO); &#125; @Override public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) &#123; switch (requestCode) &#123; case PERMISSIONS_REQUEST_AUDIO: &#123; // If request is cancelled, the result arrays are empty. if (grantResults.length &gt;= 2 &amp;&amp; grantResults[0] == PackageManager.PERMISSION_GRANTED &amp;&amp; grantResults[1] == PackageManager.PERMISSION_GRANTED) &#123; Toast.makeText(this,\"用户授权成功\",Toast.LENGTH_SHORT).show(); //在这里做授权成功之后的处理 &#125; else &#123;// Log.e(LOG_TAG, \"Permission is not granted:\" + grantResults[0] + grantResults[1]); &#125; return; &#125; default: &#123; super.onRequestPermissionsResult(requestCode, permissions, grantResults); &#125; &#125; &#125;&#125; 在实际应用中，我们还需要注意，6.0提供了一个应用权限管理界面，用户有可能会自己去关闭应用授权，有可能导致程序奔溃，因此当检测到权限被拒接时，给予用户良好的提示，引导用户开启必需的权限，这样的提示同样也是在第一次授权时需要给予用户提醒的。即使支持运行时权限，我们也需要在Mainfest文件中声明。 两个影响较大的权限运行时权限对于应用影响比较大的权限有两个，他们分别是12READ_PHONE_STATEWRITE_EXTERNAL_STORAGE/READ_EXTERNAL_STORAGE 其中READ_PHONE_STATE用来获取deviceID，即IMEI号码。这是很多统计依赖计算设备唯一ID的参考。如果新的权限导致读取不到，避免导致统计的异常。建议在完全支持运行时权限之前，将对应的值写入到App本地数据中，对于新安装的，可以采取其他策略减少对统计的影响。 WRITE_EXTERNAL_STORAGE/READ_EXTERNAL_STORAGE这两个权限和外置存储（即sdcard）有关，对于下载相关的应用这一点还是比较重要的，我们应该尽可能的说明和引导用户授予该权限。 简单易用的第三方库RxPermission：https://github.com/tbruyelle/RxPermissions","categories":[{"name":"Android","slug":"Android","permalink":"http://haodadaa.github.io/categories/Android/"}],"tags":[{"name":"运行时权限","slug":"运行时权限","permalink":"http://haodadaa.github.io/tags/运行时权限/"}],"keywords":[{"name":"Android","slug":"Android","permalink":"http://haodadaa.github.io/categories/Android/"}]},{"title":"RxJava2.0 操作符简介","slug":"RxJava操作符简介","date":"2017-05-18T07:00:00.000Z","updated":"2017-05-22T13:45:05.074Z","comments":true,"path":"2017/05/18/RxJava操作符简介/","link":"","permalink":"http://haodadaa.github.io/2017/05/18/RxJava操作符简介/","excerpt":"just操作符 just()，直接创建一个Observable并自动调用onNext()发射数据 1Observable&lt;String&gt; observable = Observable.just(\"Hello World\"); fromIterable操作符 fromIterable()，遍历集合，然后发射每一个item，相当于多次调用onNext()，每次传一个item 12345List&lt;String&gt; list = new ArrayList&lt;&gt;();for (int i = 0; i &lt; 10; i++) &#123; list.add(i + \"\");&#125;Observable&lt;String&gt; observable = Observable.fromIterable((Iterable&lt;String&gt;) list);","text":"just操作符 just()，直接创建一个Observable并自动调用onNext()发射数据 1Observable&lt;String&gt; observable = Observable.just(\"Hello World\"); fromIterable操作符 fromIterable()，遍历集合，然后发射每一个item，相当于多次调用onNext()，每次传一个item 12345List&lt;String&gt; list = new ArrayList&lt;&gt;();for (int i = 0; i &lt; 10; i++) &#123; list.add(i + \"\");&#125;Observable&lt;String&gt; observable = Observable.fromIterable((Iterable&lt;String&gt;) list); defer操作符 defer()，当观察者订阅时，才创建Observable，并且针对每个观察者创建都是一个新的Observable。以何种方式创建这个Observable对象，当满足回调条件后，就会进行相应的回调。 123456Observable&lt;String&gt; observable = Observable.defer(new Callable&lt;ObservableSource&lt;? extends String&gt;&gt;() &#123; @Override public ObservableSource&lt;? extends String&gt; call() throws Exception &#123; return Observable.just(\"hello\"); &#125;&#125;); interval操作符 interval()，创建一个按固定时间间隔发射整数序列的Observable，即按照固定秒数一次调用onNext(),可用作定时器 1Observable&lt;Long&gt; observable = Observable.interval(1, TimeUnit.SECONDS); range操作符 range()，创建一个发射整数序列的Observable，第一个参数为起始值，第二个参数为发送个数，0则不发送，负数则抛出异常。 1Observable&lt;Integer&gt; observable = Observable.range(1, 10); timer操作符 timer()，给定一个延迟时间间隔发射数据 1Observable&lt;Long&gt; observable = Observable.timer(2,TimeUnit.SECONDS); repeat操作符 repeat()，重复调用一个Observable事件 1Observable&lt;String&gt; observable = Observable.just(\"1\").repeat(); map操作符 map()，把原来的Observable对象转换为另一个Observable对象，对传输的数据进行灵活操作，获取想要的数据形式 123456Observable&lt;Integer&gt; observable = Observable.just(\"hello\").map(new Function&lt;String, Integer&gt;() &#123; @Override public Integer apply(String s) throws Exception &#123; return s.length(); &#125;&#125;); flatMap操作符 filter操作符 take操作符 doOnNext操作符","categories":[{"name":"Android","slug":"Android","permalink":"http://haodadaa.github.io/categories/Android/"}],"tags":[{"name":"RxJava","slug":"RxJava","permalink":"http://haodadaa.github.io/tags/RxJava/"}],"keywords":[{"name":"Android","slug":"Android","permalink":"http://haodadaa.github.io/categories/Android/"}]},{"title":"Gradle项目依赖统一管理","slug":"Gradle项目依赖统一管理","date":"2017-03-20T08:30:18.000Z","updated":"2017-05-22T13:42:09.858Z","comments":true,"path":"2017/03/20/Gradle项目依赖统一管理/","link":"","permalink":"http://haodadaa.github.io/2017/03/20/Gradle项目依赖统一管理/","excerpt":"前言 通常情况下，我们只有一application module时，只需要配置一个project级的build.gradle和一个module级的build.gradle。 当我们一个项目下有多个module并且依赖也比较复杂时，如果这时需要修改某个开源库的版本依赖，则需要找到每个引用依赖的地方进行修改。 如果我们自定义一个配置文件统一的管理这些依赖，不仅方便我们修改还减少错误率。","text":"前言 通常情况下，我们只有一application module时，只需要配置一个project级的build.gradle和一个module级的build.gradle。 当我们一个项目下有多个module并且依赖也比较复杂时，如果这时需要修改某个开源库的版本依赖，则需要找到每个引用依赖的地方进行修改。 如果我们自定义一个配置文件统一的管理这些依赖，不仅方便我们修改还减少错误率。 解决方案 在root目录声明全局变量，在project级build.gradle中apply from引用进来，使用rootProject.ext引用具体的库依赖 步骤 在项目的根文件夹下新建一个config.gradle（名字可以自己定义)声明全局变量，内容如下(请根据自己库和版本进行修改)： 1234567891011121314151617181920212223242526272829303132333435363738def supportVersion = \"25.0.1\"def retrofitVersion = \"2.0.2\"def butterKnifeVersion = \"8.1.0\"project.ext &#123; android = [ compileSdkVersion: 25, buildToolsVersion: \"25.0.1\", applicationId : \"com.hao.mybaselib\", minSdkVersion : 16, targetSdkVersion : 25, versionCode : 1, versionName : \"1.0\", javaVersion : JavaVersion.VERSION_1_8 ] dependencies = [ //android-support \"support-v4\" : \"com.android.support:support-v4:$&#123;supportVersion&#125;\", \"appcompat-v7\" : \"com.android.support:appcompat-v7:$&#123;supportVersion&#125;\", \"design\" : \"com.android.support:design:$&#123;supportVersion&#125;\", \"recyclerview\" : \"com.android.support:recyclerview-v7:$&#123;supportVersion&#125;\", \"cardview\" : \"com.android.support:cardview-v7:$&#123;supportVersion&#125;\", //rx \"rxjava\" : \"io.reactivex:rxjava:1.1.6\", \"rxandroid\" : \"io.reactivex:rxandroid:1.2.1\", //retrofit \"retrofit\" : \"com.squareup.retrofit2:retrofit:$&#123;retrofitVersion&#125;\", \"adapter-rxjava\": \"com.squareup.retrofit2:adapter-rxjava:$&#123;retrofitVersion&#125;\", //others \"okhttp3-logging-interceptor\": \"com.squareup.okhttp3:logging-interceptor:3.1.2\", \"butterknife\" : \"com.jakewharton:butterknife:$&#123;butterKnifeVersion&#125;\", \"butterknife-compiler\" : \"com.jakewharton:butterknife-compiler:$&#123;butterKnifeVersion&#125;\", ]&#125; 在项目级的build.gradle添加apply from引用 1apply from: \"config.gradle\" 在module级的build.gradle中使用如下： 1234567891011121314151617181920212223242526272829303132333435apply plugin: 'com.android.library'apply plugin: 'com.neenbedankt.android-apt'android &#123; compileSdkVersion rootProject.ext.android.compileSdkVersion buildToolsVersion rootProject.ext.android.buildToolsVersion defaultConfig &#123;// applicationId \"com.hao.mybaselib\" minSdkVersion rootProject.ext.android.minSdkVersion targetSdkVersion rootProject.ext.android.targetSdkVersion versionCode rootProject.ext.android.versionCode versionName rootProject.ext.android.versionName &#125; buildTypes &#123; release &#123; minifyEnabled false proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro' &#125; &#125;&#125;dependencies &#123; compile fileTree(include: ['*.jar'], dir: 'libs') testCompile 'junit:junit:4.12' compile rootProject.ext.dependencies.getAt(\"appcompat-v7\") compile rootProject.ext.dependencies.getAt(\"recyclerview\") //ButterKnife compile rootProject.ext.dependencies.getAt(\"butterknife\") apt rootProject.ext.dependencies.getAt(\"butterknife-compiler\") //rx compile rootProject.ext.dependencies.getAt(\"rxjava\") compile rootProject.ext.dependencies.getAt(\"rxandroid\")&#125; 之后若需要修改版本或配置，只需要在config.gradle中做修改。","categories":[{"name":"Android","slug":"Android","permalink":"http://haodadaa.github.io/categories/Android/"}],"tags":[],"keywords":[{"name":"Android","slug":"Android","permalink":"http://haodadaa.github.io/categories/Android/"}]},{"title":"Hello World","slug":"hello-world","date":"2016-08-08T08:25:17.000Z","updated":"2017-05-22T13:31:55.839Z","comments":true,"path":"2016/08/08/hello-world/","link":"","permalink":"http://haodadaa.github.io/2016/08/08/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" #标题一 More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"建站","slug":"建站","permalink":"http://haodadaa.github.io/categories/建站/"}],"tags":[],"keywords":[{"name":"建站","slug":"建站","permalink":"http://haodadaa.github.io/categories/建站/"}]},{"title":"人物志","slug":"人物志","date":"1994-12-31T02:00:00.000Z","updated":"2017-06-19T07:30:49.582Z","comments":true,"path":"1994/12/31/人物志/","link":"","permalink":"http://haodadaa.github.io/1994/12/31/人物志/","excerpt":"","text":"","categories":[{"name":"Me","slug":"Me","permalink":"http://haodadaa.github.io/categories/Me/"}],"tags":[],"keywords":[{"name":"Me","slug":"Me","permalink":"http://haodadaa.github.io/categories/Me/"}]}]}